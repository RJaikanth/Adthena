/*
 * This Scala source file was generated by the Gradle 'init' task.
 */
package adthena

import org.apache.spark.sql.{Dataset, Encoders, SparkSession}
import adthena.Utils.{readTSV, roundToInt}
import adthena.DataSchema._

import org.apache.spark.sql.functions._

object App {

  def main(args: Array[String]): Unit = {

    // Spark Session
    implicit val spark: SparkSession = SparkSession
      .builder()
      .appName("adthena-assignment")
      .master("local")
      .config("spark.jars.packages", "org.apache.hadoop:hadoop-aws:3.3.4")
      .getOrCreate()
    import spark.implicits._

    // AWS Config
    spark.sparkContext.hadoopConfiguration.set("fs.s3.awsAccessKeyId", "KEY")
    spark.sparkContext.hadoopConfiguration.set("fs.s3.awsSecretAccessKey", "KEY")
    spark.sparkContext.hadoopConfiguration.set("fs.s3n.endpoint", "s3.amazonaws.com")

    // Step1: Read TSV Files
    val root = "s3a://adthena.data.engineer.test/"
    val volumesDF = readTSV[Volumes](s"$root/volumes/*")
    val competitorAppearancesDF = readTSV[CompetitorAppearances](s"$root/competitor_appearances/*")
    val relevantCompetitorsDF = readTSV[RelevantCompetitors](s"$root/relevant_competitors/*")
    val relevantSearchTermsDF = readTSV[RelevantSearchTerms](s"$root/relevant_search_terms/*")
    val scrapeAppearancesDF = readTSV[ScrapeAppearances](s"$root/scrape_appearances/*")

    // Step2: Get Total number of scrapes for each search term per day across devices
    val scrapeCountTotal = scrapeAppearancesDF
      .groupBy("date", "searchTerm")
      .agg(sum("scrapeCount").as("totalScrapes"))

    // Step3: Get relevant searchTerms and domain for each accountId
    val relevantSearchDomain = relevantSearchTermsDF
      .join(relevantCompetitorsDF, Seq("accountId"), "LEFT")

    // Step4: Get daily volume of searches across devices
    val dailyVolume = volumesDF
      .groupBy("searchTerm")
      .agg(sum("volume").as("totalVolume"))
      .select($"searchTerm", roundToInt($"totalVolume" / 30).as("dailyVolume"))

    // Step5: Get Total number of appearances for each combination of (searchTerm, domain) per day across devices
    val appearancesTotal = competitorAppearancesDF
      .groupBy("date", "searchTerm", "domain")
      .agg(sum("appearances").as("totalAppearances"))

    // Step6: Calculate impressions for each domain
    val impressions = appearancesTotal
      .join(scrapeCountTotal, Seq("searchTerm", "date"), "LEFT")
      .join(dailyVolume, Seq("searchTerm"), "LEFT")
      .withColumn("impressionsBySearchTerm", roundToInt(($"totalAppearances" / $"totalScrapes") * $"dailyVolume"))
      .select($"searchTerm", $"domain", $"date", $"impressionsBySearchTerm")
      .join(relevantSearchDomain, Seq("searchTerm", "domain"), "INNER")
      .groupBy($"accountId", $"date", $"domain")
      .agg(sum("impressionsBySearchTerm").cast("int").as("impressions"))
      .as[Impressions]

    // Step7: Saving locally as write permissions are not available on S3 server
    val projectRoot = System.getProperty("user.dir")
    impressions
      .coalesce(1)
      .write
      .mode("overwrite")
      .option("delimiter", "\t")
      .option("header", "true")
      .csv(s"$projectRoot/finalResults.tsv")
  }

}
